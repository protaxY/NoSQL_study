x-api-config: &api-config
  build: api
  env_file:
    - infrastructure/docker.env
  depends_on:
    
    mongo_cluster_init:
      condition: service_completed_successfully
    
    elasticsearch_node_01:
      condition: service_healthy
    elasticsearch_node_02:
      condition: service_healthy
    elasticsearch_node_03:
      condition: service_healthy
    
    kibana:
      condition: service_started
    
    memcached_user_node_01:
      condition: service_healthy  
    memcached_user_node_02:
      condition: service_healthy  
    memcached_user_node_03:
      condition: service_healthy  
    memcached_message_node_01:
      condition: service_healthy  
    memcached_message_node_02:
      condition: service_healthy    
    memcached_message_node_03:
      condition: service_healthy
    memcached_chat_history_node_01:
      condition: service_healthy
    memcached_chat_history_node_02:
      condition: service_healthy
    memcached_chat_history_node_03:
      condition: service_healthy
    memcached_recent_users_node_01:
      condition: service_healthy
    memcached_recent_users_node_02:
      condition: service_healthy
    memcached_recent_users_node_03:
      condition: service_healthy

x-mongodb-healthcheck: &mongodb-healhcheck
  healthcheck:
    test: echo 'db.runCommand("ping").ok' | mongosh 127.0.0.1:27017/test --quiet
    interval: 10s
    timeout: 10s
    retries: 5
    start_period: 40s

x-elasticsearch-healhcheck: &elasticsearch-healhcheck
  healthcheck:
    interval: 1s
    retries: 60
    test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://127.0.0.1:9200

x-memcached-healhcheck: &memcached-healhcheck
  healthcheck:
    test: echo stats | nc 127.0.0.1 11211 
    interval: 1s
    retries: 60

services:

  api_node_01:
    <<: *api-config

  api_node_02:
    <<: *api-config

  api_node_03:
    <<: *api-config


  mongo_cluster_init:
    image: mongo
    depends_on:
      mongo_db_node_01:
        condition: service_healthy
      mongo_db_node_02:
        condition: service_healthy
      mongo_db_node_03:
        condition: service_healthy
    volumes:
      - ./infrastructure/init-mongo.js:/scripts/init-mongo.js:ro
    entrypoint: [ "mongosh", "--host", "mongo_db_node_01", "--file", "/scripts/init-mongo.js"]

  mongo_db_node_01:
    image: mongo
    <<: *mongodb-healhcheck
    volumes:
      - ./data/mongo_node_01:/data/db
    command: mongod --replSet docker-replicaset

  mongo_db_node_02:
    image: mongo
    <<: *mongodb-healhcheck
    volumes:
      - ./data/mongo_node_02:/data/db
    command: mongod --replSet docker-replicaset

  mongo_db_node_03:
    image: mongo
    <<: *mongodb-healhcheck
    volumes:
      - ./data/mongo_node_03:/data/db
    command: mongod --replSet docker-replicaset

  elasticsearch_node_01:
    image: elasticsearch:8.10.2
    <<: [ *elasticsearch-healhcheck ]
    environment:
      - node.name=elasticsearch_node_01
      - discovery.seed_hosts=[elasticsearch_node_02,elasticsearch_node_03]
    env_file:
      - infrastructure/elasticsearch.env
    volumes:
      - ./data/elasticsearch_node_01:/usr/share/elasticsearch/data

  elasticsearch_node_02:
    image: elasticsearch:8.10.2
    <<: [ *elasticsearch-healhcheck ]
    environment:
     - node.name=elasticsearch_node_02
     - discovery.seed_hosts=[elasticsearch_node_01,elasticsearch_node_03]
    env_file:
      - infrastructure/elasticsearch.env
    volumes:
      - ./data/elasticsearch_node_02:/usr/share/elasticsearch/data

  elasticsearch_node_03:
    image: elasticsearch:8.10.2
    <<: [ *elasticsearch-healhcheck ]
    environment:
     - node.name=elasticsearch_node_03
     - discovery.seed_hosts=[elasticsearch_node_01,elasticsearch_node_02]
    env_file:
      - infrastructure/elasticsearch.env
    volumes:
      - ./data/elasticsearch_node_03:/usr/share/elasticsearch/data

  kibana:
    image: kibana:8.10.2
    ports:
    - 5601:5601
    volumes:
      - ./data/kibana:/usr/share/kibana/data
    environment:
      - ELASTICSEARCH_HOSTS=elasticsearch_node_01,elasticsearch_node_02,elasticsearch_node_03
    depends_on:
      elasticsearch_node_01:
        condition: service_healthy
      elasticsearch_node_02:
        condition: service_healthy
      elasticsearch_node_03:
        condition: service_healthy

  memcached_user_node_01:
    image: memcached:alpine
    <<: *memcached-healhcheck
  
  memcached_user_node_02:
    image: memcached:alpine
    <<: *memcached-healhcheck
  
  memcached_user_node_03:
    image: memcached:alpine
    <<: *memcached-healhcheck
  
  memcached_message_node_01:
    image: memcached:alpine
    <<: *memcached-healhcheck
  
  memcached_message_node_02:
    image: memcached:alpine
    <<: *memcached-healhcheck
    
  memcached_message_node_03:
    image: memcached:alpine
    <<: *memcached-healhcheck

  memcached_chat_history_node_01:
    image: memcached:alpine
    <<: *memcached-healhcheck

  memcached_chat_history_node_02:
    image: memcached:alpine
    <<: *memcached-healhcheck

  memcached_chat_history_node_03:
    image: memcached:alpine
    <<: *memcached-healhcheck

  memcached_recent_users_node_01:
    image: memcached:alpine
    <<: *memcached-healhcheck

  memcached_recent_users_node_02:
    image: memcached:alpine
    <<: *memcached-healhcheck

  memcached_recent_users_node_03:
    image: memcached:alpine
    <<: *memcached-healhcheck


  nginx:
    image: nginx
    ports:
      - 80:80
    depends_on:
      - api_node_01
      - api_node_02
      - api_node_03
    volumes:
      - ./data/nginx/cache:/data/nginx/cache
      - ./infrastructure/nginx.conf:/etc/nginx/nginx.conf:ro